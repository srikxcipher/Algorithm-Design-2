public class QuickSort {

    // Counter for the number of recursive calls
    private static int recursiveCalls = 0;

    // Counter for the number of element swaps
    private static int swapCount = 0;

    // Function to partition the array and return the pivot index
    private static int partition(int[] arr, int low, int high) {
        int pivot = arr[high];
        int i = (low - 1); // Index of smaller element
        for (int j = low; j < high; j++) {
            // If current element is smaller than or equal to pivot
            if (arr[j] <= pivot) {
                i++;

                // Swap arr[i] and arr[j]
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
                swapCount++;
            }
        }

        // Swap arr[i+1] and arr[high] (or pivot)
        int temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;
        swapCount++;

        return i + 1;
    }

    // Main function that implements QuickSort
    private static void sort(int[] arr, int low, int high) {
        recursiveCalls++;
        if (low < high) {
            // pi is partitioning index, arr[pi] is now at right place
            int pi = partition(arr, low, high);

            // Recursively sort elements before partition and after partition
            sort(arr, low, pi - 1);
            sort(arr, pi + 1, high);
        }
    }

    // Utility function to print array of size n
    private static void printArray(int[] arr) {
        int n = arr.length;
        for (int i = 0; i < n; ++i)
            System.out.print(arr[i] + " ");
        System.out.println();
    }

    // Driver method
    public static void main(String[] args) {
        int[] arr = {10, 7, 8, 9, 1, 5};
        System.out.println("Given Array:");
        printArray(arr);

        recursiveCalls = 0; // Reset the counter
        swapCount = 0; // Reset the swap count
        QuickSort.sort(arr, 0, arr.length - 1);

        System.out.println("\nSorted array:");
        printArray(arr);

        System.out.println("\nNumber of recursive calls: " + recursiveCalls);
        System.out.println("Number of element swaps: " + swapCount);
    }
}
